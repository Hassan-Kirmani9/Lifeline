{"ast":null,"code":"var _jsxFileName = \"D:\\\\src\\\\src\\\\pages\\\\Appointment.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport img1 from \"./../assets/image-removebg-preview.png\";\nimport \"./../css/img.css\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Appointment() {\n  _s();\n  const [dobPickerOpen, setDobPickerOpen] = useState(false);\n  const [apptDatePickerOpen, setApptDatePickerOpen] = useState(false);\n  const [availableTimes, setAvailableTimes] = useState([]);\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const handleDOBChange = date => {\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      APatientDOB: date\n    }));\n    setDobPickerOpen(false);\n    // Reset available times\n    setAvailableTimes([]);\n  };\n  const handleApptDateChange = async date => {\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      ADate: date\n    }));\n    setApptDatePickerOpen(false);\n    // Reset available times\n    setAvailableTimes([]);\n    if (formData.adId && date) {\n      // Fetch available appointment times based on doctor ID and date\n      try {\n        const response = await fetch(`http://localhost:5206/api/Doctors_Cr/returntime?DoctorId=${formData.adId}&AppointmentDate=${date.toISOString().split(\"T\")[0]}`);\n        if (response.ok) {\n          const times = await response.json();\n          setAvailableTimes(times.map(formatTimeToAMPM));\n        } else {\n          console.error(\"Failed to fetch available times:\", response.status, response.statusText);\n          setAvailableTimes([]);\n        }\n      } catch (error) {\n        console.error(\"An error occurred while fetching available times:\", error);\n        setAvailableTimes([]);\n      }\n    }\n  };\n  const [formData, setFormData] = useState({\n    APatientName: \"\",\n    APatientDOB: \"\",\n    ADate: \"\",\n    ATime: \"\",\n    adId: \"\",\n    AType: \"\",\n    AMobile: \"\",\n    AEmail: \"\",\n    AReason: \"\"\n  });\n  const [doctorsA, setDoctorsA] = useState([]);\n  const [hospitals, setHospitals] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const fetchDoctorsA = async dhId => {\n    try {\n      const response = await fetch(`http://localhost:5206/api/Doctors_Cr/ByHospitalId/${dhId}`);\n      if (response.ok) {\n        const doctorList = await response.json();\n        setDoctorsA(doctorList);\n\n        // Update the selected doctor ID in the state if the list is not empty\n        if (doctorList.length > 0) {\n          setFormData(prevFormData => ({\n            ...prevFormData,\n            adId: doctorList[0].dId\n          }));\n        } else {\n          // Handle the case where no doctors are found for the selected hospital\n          setDoctorsA([]);\n        }\n      } else {\n        console.error(\"Failed to fetch doctors:\", response.status, response.statusText);\n      }\n    } catch (error) {\n      console.error(\"An error occurred while fetching doctors:\", error);\n    }\n  };\n  const formatTimeToAMPM = timeString => {\n    const time = new Date(timeString);\n    return time.toLocaleString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"numeric\",\n      hour12: true\n    });\n  };\n  useEffect(() => {\n    const fetchHospitalsA = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5206/api/Hospital_Cr\");\n        if (response.ok) {\n          const hospitalList = await response.json();\n          setHospitals(hospitalList);\n        } else {\n          console.error(\"Failed to fetch hospitals:\", response.status, response.statusText);\n        }\n      } catch (error) {\n        console.error(\"An error occurred while fetching hospitals:\", error);\n      }\n    };\n    fetchHospitalsA();\n  }, []);\n  const handleSubmitA = async e => {\n    e.preventDefault();\n    const requiredFields = [{\n      name: \"APatientName\",\n      label: \"Your Name\"\n    }, {\n      name: \"APatientDOB\",\n      label: \"Date Of Birth\"\n    }, {\n      name: \"ahId\",\n      label: \"Hospital\"\n    }, {\n      name: \"adId\",\n      label: \"Doctor\"\n    }, {\n      name: \"ADate\",\n      label: \"Appointment Date\"\n    }, {\n      name: \"ATime\",\n      label: \"Appointment Time\"\n    }, {\n      name: \"AType\",\n      label: \"Appointment Type\"\n    }, {\n      name: \"AMobile\",\n      label: \"Contact No.\"\n    }, {\n      name: \"AEmail\",\n      label: \"Your Email\"\n    }, {\n      name: \"AReason\",\n      label: \"Appointment Reason\"\n    }];\n    const emptyFields = requiredFields.filter(field => !formData[field.name]);\n    if (emptyFields.length > 0) {\n      // If any required field is empty, display a SweetAlert\n      setShowAlert(true);\n      setAlertMessage(`Please fill out the following fields: ${emptyFields.map(field => field.label).join(\", \")}`);\n      return; // Prevent form submission\n    }\n    try {\n      setLoading(true);\n      const formattedData = {\n        ...formData,\n        APatientDOB: formatDate(formData.APatientDOB),\n        ADate: formatDate(formData.ADate),\n        ATime: formatTime(formData.ATime)\n      };\n      const response = await fetch(\"http://localhost:5206/api/appointment_cr\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formattedData)\n      });\n      if (response.ok) {\n        setFormData({\n          APatientName: \"\",\n          APatientDOB: \"\",\n          ADate: \"\",\n          ATime: \"\",\n          adId: \"\",\n          AType: \"\",\n          AMobile: \"\",\n          AEmail: \"\",\n          AReason: \"\"\n        });\n        setLoading(false);\n        // alert(\"Appointment request succesfull\");\n        Swal.fire('Success', \"Appointment request succesfull!\", 'success');\n        // Add any additional actions you want to perform after successful submission\n      } else {\n        Swal.fire('Error', \"Failed to create appointment!\", 'error');\n        console.error(\"Failed to create appointment:\", response.status, response.statusText);\n        setLoading(false);\n      }\n    } catch (error) {\n      console.error(\"An error occurred during form submission:\", error);\n      setLoading(false);\n    }\n  };\n  const handleInputChangeA = async e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    // Convert date and time values to the desired format\n    const formattedValue = name === \"APatientDOB\" || name === \"ADate\" ? formatDate(value) : value;\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      [name]: formattedValue\n    }));\n    if (name === \"ahId\") {\n      setDoctorsA([]); // Clear the existing doctorsA list\n      if (value) {\n        try {\n          const response = await fetch(`http://localhost:5206/api/Doctors_Cr/ByHospitalId/${value}`);\n          if (response.ok) {\n            const doctorList = await response.json();\n            const availableDoctors = doctorList.filter(doctor => doctor.dAvailablityStatus === \"Available\");\n            setDoctorsA(availableDoctors);\n            // setDoctorsA(doctorList);\n\n            // Update the selected doctor ID in the state if the list is not empty\n            if (doctorList.length > 0) {\n              setFormData(prevFormData => ({\n                ...prevFormData,\n                adId: doctorList[0].dId\n              }));\n            } else {\n              // Handle the case where no doctors are found for the selected hospital\n              setDoctorsA([]);\n              setFormData(prevFormData => ({\n                ...prevFormData,\n                adId: \"\" // Set adId to an empty string if no doctors are found\n              }));\n            }\n            // Reset available times whenever the hospital selection changes\n            setAvailableTimes([]);\n          } else {\n            console.error(\"Failed to fetch doctors:\", response.status, response.statusText);\n          }\n        } catch (error) {\n          console.error(\"An error occurred while fetching doctors:\", error);\n        }\n      }\n    }\n    if (name === \"adId\") {\n      // Reset available times whenever the doctor selection changes\n      setAvailableTimes([]);\n      setFormData(prevFormData => ({\n        ...prevFormData,\n        [name]: value\n      }));\n    }\n    if (name === \"ATime\") {\n      handleTimeChange(value);\n    }\n  };\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    return date.toISOString().split(\"T\")[0]; // Format as 'yyyy-mm-dd'\n  };\n  const handleTimeChange = time => {\n    const formattedTime = `${time}:00.0000000`;\n  };\n  const formatTime = timeString => {\n    // Extract the time part without AM/PM\n    const timePart = timeString.split(\" \")[0];\n    // Split hours and minutes\n    const [hours, minutes] = timePart.split(\":\");\n    // Format the time as HH:mm:ss\n    return `${hours.padStart(2, \"0\")}:${minutes.padStart(2, \"0\")}:00`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid bg-dblue \",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row gx-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6 mb-5 mb-lg-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-12\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mb-4\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  className: \"d-inline-block text-primary text-uppercase border-bottom border-5\",\n                  children: \"Schedule\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n                  className: \"display-4 text-white\",\n                  children: \"An Appointment\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-white mb-5 ft16\",\n                children: \"Make an appointment with the hospital of your choice in your comfortable time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-md-12 img-container\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: img1,\n                  alt: \"Hospital\",\n                  className: \"img-fluid\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white text-center rounded p-5\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"mb-4 text-dblue\",\n              children: \"Book An Appointment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmitA,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row g-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    required: true,\n                    className: \"form-control bg-white pla  border-1\",\n                    placeholder: \"Your Name\",\n                    style: {\n                      height: 55\n                    },\n                    name: \"APatientName\",\n                    value: formData.APatientName,\n                    onChange: handleInputChangeA,\n                    maxLength: 25,\n                    minLength: 3\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 333,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 332,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                    selected: formData.APatientDOB,\n                    className: \"form-control bg-white pla border-1\",\n                    onChange: handleDOBChange,\n                    style: {\n                      border: '1px solid #011430 !important'\n                    },\n                    placeholderText: \"Date Of Birth (mm/dd/yyyy)\",\n                    dateFormat: \"MM/dd/yyyy\",\n                    peekNextMonth: true,\n                    showMonthDropdown: true,\n                    showYearDropdown: true,\n                    required: true,\n                    dropdownMode: \"select\",\n                    maxDate: new Date() // Set minDate to current date\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 350,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"select\", {\n                    className: \"form-select bg-white pla border-1\",\n                    style: {\n                      height: 55\n                    },\n                    name: \"ahId\",\n                    required: true,\n                    value: formData.ahId,\n                    onChange: handleInputChangeA,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      disabled: true,\n                      selected: true,\n                      children: \"Select Hospital\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 374,\n                      columnNumber: 23\n                    }, this), hospitals.map(hospital => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: hospital.hId,\n                      children: hospital.hName\n                    }, hospital.hId, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 378,\n                      columnNumber: 25\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 366,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 365,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"select\", {\n                    className: \"form-select bg-white pla border-1\",\n                    style: {\n                      height: 55\n                    },\n                    name: \"adId\",\n                    required: true,\n                    value: formData.adId || \"\",\n                    onChange: handleInputChangeA,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      disabled: true,\n                      selected: true,\n                      children: \"Select Doctor\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 393,\n                      columnNumber: 23\n                    }, this), doctorsA.map(doctor => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: doctor.dId,\n                      children: doctor.dName\n                    }, doctor.dId, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 397,\n                      columnNumber: 25\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 385,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: /*#__PURE__*/_jsxDEV(DatePicker, {\n                    selected: formData.ADate,\n                    onChange: handleApptDateChange,\n                    className: \"form-control bg-white pla border-1\",\n                    placeholderText: \"Select Appointment Date (mm/dd/yyyy)\",\n                    dateFormat: \"MM/dd/yyyy\",\n                    required: true,\n                    peekNextMonth: true,\n                    showMonthDropdown: true,\n                    style: {\n                      border: '1px solid #011430 !important'\n                    },\n                    showYearDropdown: true,\n                    dropdownMode: \"select\",\n                    minDate: new Date()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 404,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 403,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: formData.adId && formData.ADate && /*#__PURE__*/_jsxDEV(\"select\", {\n                    className: \"form-select bg-white pla border-1\",\n                    style: {\n                      height: 55\n                    },\n                    name: \"ATime\",\n                    required: true,\n                    value: formData.ATime,\n                    onChange: handleInputChangeA,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      disabled: true,\n                      value: \"\",\n                      children: \"Select Time\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 429,\n                      columnNumber: 25\n                    }, this), availableTimes.map((time, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: time,\n                      children: time\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 433,\n                      columnNumber: 27\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 421,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"select\", {\n                    className: \"form-control bg-white pla border-1\",\n                    style: {\n                      height: 55\n                    },\n                    name: \"AType\",\n                    required: true,\n                    value: formData.AType,\n                    onChange: handleInputChangeA,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"Select Appointment Type\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 449,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Physical\",\n                      children: \"Physical\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 450,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"Online\",\n                      children: \"Online\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 451,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 441,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 440,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"tel\",\n                    className: \"form-control bg-white pla border-1\",\n                    placeholder: \"Contact No.\",\n                    style: {\n                      height: 55\n                    },\n                    name: \"AMobile\",\n                    required: true,\n                    pattern: \"^03[0-9]{9}$\",\n                    value: formData.AMobile,\n                    onChange: handleInputChangeA,\n                    maxLength: 11,\n                    minLength: 11\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 455,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 454,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"email\",\n                    className: \"form-control bg-white pla border-1\",\n                    placeholder: \"Your Email\",\n                    style: {\n                      height: 55\n                    },\n                    name: \"AEmail\",\n                    required: true,\n                    pattern: \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\",\n                    value: formData.AEmail,\n                    onChange: handleInputChangeA\n                    // maxLength={30}\n                    // minLength={12}\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 470,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 469,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                    className: \"form-control bg-white pla border-1\",\n                    placeholder: \"Appointment Reason\",\n                    style: {\n                      height: 100\n                    },\n                    name: \"AReason\",\n                    required: true,\n                    value: formData.AReason,\n                    onChange: handleInputChangeA,\n                    maxLength: 50,\n                    minLength: 5\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 485,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 484,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-primary btn-hov w-100 py-3 text-white\",\n                    type: \"submit\",\n                    children: loading ? \"Sending...\" : \"Make an Appointment\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 498,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 497,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 331,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SweetAlert, {\n          show: showAlert,\n          title: \"Required Fields\",\n          onConfirm: () => setShowAlert(false),\n          children: alertMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 300,\n    columnNumber: 5\n  }, this);\n}\n_s(Appointment, \"huQUQH6p3xZpv6GTUEyaVowcK8U=\");\n_c = Appointment;\nexport default Appointment;\nvar _c;\n$RefreshReg$(_c, \"Appointment\");","map":{"version":3,"names":["React","useEffect","useState","DatePicker","img1","SweetAlert","Swal","jsxDEV","_jsxDEV","Appointment","_s","dobPickerOpen","setDobPickerOpen","apptDatePickerOpen","setApptDatePickerOpen","availableTimes","setAvailableTimes","showAlert","setShowAlert","alertMessage","setAlertMessage","handleDOBChange","date","setFormData","prevFormData","APatientDOB","handleApptDateChange","ADate","formData","adId","response","fetch","toISOString","split","ok","times","json","map","formatTimeToAMPM","console","error","status","statusText","APatientName","ATime","AType","AMobile","AEmail","AReason","doctorsA","setDoctorsA","hospitals","setHospitals","loading","setLoading","fetchDoctorsA","dhId","doctorList","length","dId","timeString","time","Date","toLocaleString","hour","minute","hour12","fetchHospitalsA","hospitalList","handleSubmitA","e","preventDefault","requiredFields","name","label","emptyFields","filter","field","join","formattedData","formatDate","formatTime","method","headers","body","JSON","stringify","fire","handleInputChangeA","value","target","formattedValue","availableDoctors","doctor","dAvailablityStatus","handleTimeChange","dateString","formattedTime","timePart","hours","minutes","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onSubmit","type","required","placeholder","style","height","onChange","maxLength","minLength","selected","border","placeholderText","dateFormat","peekNextMonth","showMonthDropdown","showYearDropdown","dropdownMode","maxDate","ahId","disabled","hospital","hId","hName","dName","minDate","index","pattern","show","title","onConfirm","_c","$RefreshReg$"],"sources":["D:/src/src/pages/Appointment.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport img1 from \"./../assets/image-removebg-preview.png\";\r\nimport \"./../css/img.css\";\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport Swal from 'sweetalert2';\r\n\r\nfunction Appointment() {\r\n  const [dobPickerOpen, setDobPickerOpen] = useState(false);\r\n  const [apptDatePickerOpen, setApptDatePickerOpen] = useState(false);\r\n  const [availableTimes, setAvailableTimes] = useState([]);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState(\"\");\r\n\r\n  const handleDOBChange = (date) => {\r\n    setFormData((prevFormData) => ({ ...prevFormData, APatientDOB: date }));\r\n    setDobPickerOpen(false);\r\n    // Reset available times\r\n    setAvailableTimes([]);\r\n  };\r\n\r\n  const handleApptDateChange = async (date) => {\r\n    setFormData((prevFormData) => ({ ...prevFormData, ADate: date }));\r\n    setApptDatePickerOpen(false);\r\n    // Reset available times\r\n    setAvailableTimes([]);\r\n\r\n    if (formData.adId && date) {\r\n      // Fetch available appointment times based on doctor ID and date\r\n      try {\r\n        const response = await fetch(\r\n          `http://localhost:5206/api/Doctors_Cr/returntime?DoctorId=${\r\n            formData.adId\r\n          }&AppointmentDate=${date.toISOString().split(\"T\")[0]}`\r\n        );\r\n        if (response.ok) {\r\n          const times = await response.json();\r\n          setAvailableTimes(times.map(formatTimeToAMPM));\r\n        } else {\r\n          console.error(\r\n            \"Failed to fetch available times:\",\r\n            response.status,\r\n            response.statusText\r\n          );\r\n          setAvailableTimes([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(\r\n          \"An error occurred while fetching available times:\",\r\n          error\r\n        );\r\n        setAvailableTimes([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const [formData, setFormData] = useState({\r\n    APatientName: \"\",\r\n    APatientDOB: \"\",\r\n    ADate: \"\",\r\n    ATime: \"\",\r\n    adId: \"\",\r\n    AType: \"\",\r\n    AMobile: \"\",\r\n    AEmail: \"\",\r\n    AReason: \"\",\r\n  });\r\n\r\n  const [doctorsA, setDoctorsA] = useState([]);\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchDoctorsA = async (dhId) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5206/api/Doctors_Cr/ByHospitalId/${dhId}`\r\n      );\r\n      if (response.ok) {\r\n        const doctorList = await response.json();\r\n        setDoctorsA(doctorList);\r\n\r\n        // Update the selected doctor ID in the state if the list is not empty\r\n        if (doctorList.length > 0) {\r\n          setFormData((prevFormData) => ({\r\n            ...prevFormData,\r\n            adId: doctorList[0].dId,\r\n          }));\r\n        } else {\r\n          // Handle the case where no doctors are found for the selected hospital\r\n          setDoctorsA([]);\r\n        }\r\n      } else {\r\n        console.error(\r\n          \"Failed to fetch doctors:\",\r\n          response.status,\r\n          response.statusText\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"An error occurred while fetching doctors:\", error);\r\n    }\r\n  };\r\n\r\n  const formatTimeToAMPM = (timeString) => {\r\n    const time = new Date(timeString);\r\n    return time.toLocaleString(\"en-US\", {\r\n      hour: \"numeric\",\r\n      minute: \"numeric\",\r\n      hour12: true,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchHospitalsA = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5206/api/Hospital_Cr\");\r\n        if (response.ok) {\r\n          const hospitalList = await response.json();\r\n          setHospitals(hospitalList);\r\n        } else {\r\n          console.error(\r\n            \"Failed to fetch hospitals:\",\r\n            response.status,\r\n            response.statusText\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error(\"An error occurred while fetching hospitals:\", error);\r\n      }\r\n    };\r\n\r\n    fetchHospitalsA();\r\n  }, []);\r\n\r\n  const handleSubmitA = async (e) => {\r\n    e.preventDefault();\r\n    const requiredFields = [\r\n      { name: \"APatientName\", label: \"Your Name\" },\r\n      { name: \"APatientDOB\", label: \"Date Of Birth\" },\r\n      { name: \"ahId\", label: \"Hospital\" },\r\n      { name: \"adId\", label: \"Doctor\" },\r\n      { name: \"ADate\", label: \"Appointment Date\" },\r\n      { name: \"ATime\", label: \"Appointment Time\" },\r\n      { name: \"AType\", label: \"Appointment Type\" },\r\n      { name: \"AMobile\", label: \"Contact No.\" },\r\n      { name: \"AEmail\", label: \"Your Email\" },\r\n      { name: \"AReason\", label: \"Appointment Reason\" },\r\n    ];\r\n\r\n    const emptyFields = requiredFields.filter((field) => !formData[field.name]);\r\n\r\n    if (emptyFields.length > 0) {\r\n      // If any required field is empty, display a SweetAlert\r\n      setShowAlert(true);\r\n      setAlertMessage(\r\n        `Please fill out the following fields: ${emptyFields\r\n          .map((field) => field.label)\r\n          .join(\", \")}`\r\n      );\r\n      return; // Prevent form submission\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const formattedData = {\r\n        ...formData,\r\n        APatientDOB: formatDate(formData.APatientDOB),\r\n        ADate: formatDate(formData.ADate),\r\n        ATime: formatTime(formData.ATime),\r\n      };\r\n\r\n      const response = await fetch(\"http://localhost:5206/api/appointment_cr\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(formattedData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setFormData({\r\n          APatientName: \"\",\r\n          APatientDOB: \"\",\r\n          ADate: \"\",\r\n          ATime: \"\",\r\n          adId: \"\",\r\n          AType: \"\",\r\n          AMobile: \"\",\r\n          AEmail: \"\",\r\n          AReason: \"\",\r\n        });\r\n        setLoading(false);\r\n        // alert(\"Appointment request succesfull\");\r\n        Swal.fire('Success', \"Appointment request succesfull!\", 'success');\r\n        // Add any additional actions you want to perform after successful submission\r\n      } else {\r\n        Swal.fire('Error', \"Failed to create appointment!\", 'error');\r\n        console.error(\r\n          \"Failed to create appointment:\",\r\n          response.status,\r\n          response.statusText\r\n        );\r\n        setLoading(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"An error occurred during form submission:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChangeA = async (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    // Convert date and time values to the desired format\r\n    const formattedValue =\r\n      name === \"APatientDOB\" || name === \"ADate\" ? formatDate(value) : value;\r\n\r\n    setFormData((prevFormData) => ({\r\n      ...prevFormData,\r\n      [name]: formattedValue,\r\n    }));\r\n\r\n    if (name === \"ahId\") {\r\n      setDoctorsA([]); // Clear the existing doctorsA list\r\n      if (value) {\r\n        try {\r\n          const response = await fetch(\r\n            `http://localhost:5206/api/Doctors_Cr/ByHospitalId/${value}`\r\n          );\r\n\r\n          if (response.ok) {\r\n            const doctorList = await response.json();\r\n            const availableDoctors = doctorList.filter(\r\n              (doctor) => doctor.dAvailablityStatus === \"Available\"\r\n            );\r\n            setDoctorsA(availableDoctors);\r\n            // setDoctorsA(doctorList);\r\n\r\n            // Update the selected doctor ID in the state if the list is not empty\r\n            if (doctorList.length > 0) {\r\n              setFormData((prevFormData) => ({\r\n                ...prevFormData,\r\n                adId: doctorList[0].dId,\r\n              }));\r\n            } else {\r\n              // Handle the case where no doctors are found for the selected hospital\r\n              setDoctorsA([]);\r\n              setFormData((prevFormData) => ({\r\n                ...prevFormData,\r\n                adId: \"\", // Set adId to an empty string if no doctors are found\r\n              }));\r\n            }\r\n            // Reset available times whenever the hospital selection changes\r\n            setAvailableTimes([]);\r\n          } else {\r\n            console.error(\r\n              \"Failed to fetch doctors:\",\r\n              response.status,\r\n              response.statusText\r\n            );\r\n          }\r\n        } catch (error) {\r\n          console.error(\"An error occurred while fetching doctors:\", error);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (name === \"adId\") {\r\n      // Reset available times whenever the doctor selection changes\r\n      setAvailableTimes([]);\r\n      setFormData((prevFormData) => ({\r\n        ...prevFormData,\r\n        [name]: value,\r\n      }));\r\n    }\r\n    if (name === \"ATime\") {\r\n      handleTimeChange(value);\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    return date.toISOString().split(\"T\")[0]; // Format as 'yyyy-mm-dd'\r\n  };\r\n  const handleTimeChange = (time) => {\r\n    const formattedTime = `${time}:00.0000000`;\r\n  };\r\n\r\n  const formatTime = (timeString) => {\r\n    // Extract the time part without AM/PM\r\n    const timePart = timeString.split(\" \")[0];\r\n    // Split hours and minutes\r\n    const [hours, minutes] = timePart.split(\":\");\r\n    // Format the time as HH:mm:ss\r\n    return `${hours.padStart(2, \"0\")}:${minutes.padStart(2, \"0\")}:00`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid bg-dblue \">\r\n      <div className=\"container\">\r\n        <div className=\"row gx-5\">\r\n          <div className=\"col-md-6 mb-5 mb-lg-0\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <div className=\"mb-4\">\r\n                  <h5 className=\"d-inline-block text-primary text-uppercase border-bottom border-5\">\r\n                    Schedule\r\n                  </h5>\r\n                  <h1 className=\"display-4 text-white\">An Appointment</h1>\r\n                </div>\r\n                <p className=\"text-white mb-5 ft16\">\r\n                  Make an appointment with the hospital of your choice in your\r\n                  comfortable time\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-12 img-container\">\r\n                  <img src={img1} alt=\"Hospital\" className=\"img-fluid\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-6\">\r\n            <div className=\"bg-white text-center rounded p-5\">\r\n              <h1 className=\"mb-4 text-dblue\">Book An Appointment</h1>\r\n              <form onSubmit={handleSubmitA}>\r\n                <div className=\"row g-3\">\r\n                  <div className=\"col-12\">\r\n                    <input\r\n                      type=\"text\"\r\n                      required\r\n                      className=\"form-control bg-white pla  border-1\"\r\n                      placeholder=\"Your Name\"\r\n                      style={{ height: 55}}\r\n                      name=\"APatientName\"\r\n                      value={formData.APatientName}\r\n                      onChange={handleInputChangeA}\r\n                      maxLength={25}\r\n                      minLength={3}\r\n                    />\r\n                  </div>\r\n                  {/* <div className=\"col-12\">\r\n                  <TimePicker onChange={onChangeTime} value={valueTime} />\r\n                  </div> */}\r\n                  <div className=\"col-12\">\r\n                    <DatePicker\r\n                      selected={formData.APatientDOB}\r\n                      className=\"form-control bg-white pla border-1\"\r\n                      onChange={handleDOBChange}\r\n                      style={{border:'1px solid #011430 !important' }}\r\n                      placeholderText=\"Date Of Birth (mm/dd/yyyy)\"\r\n                      dateFormat=\"MM/dd/yyyy\"\r\n                      peekNextMonth\r\n                      showMonthDropdown\r\n                      showYearDropdown\r\n                      required\r\n                      dropdownMode=\"select\"\r\n                      maxDate={new Date()} // Set minDate to current date\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    <select\r\n                      className=\"form-select bg-white pla border-1\"\r\n                      style={{ height: 55}}\r\n                      name=\"ahId\"\r\n                      required\r\n                      value={formData.ahId}\r\n                      onChange={handleInputChangeA}\r\n                    >\r\n                      <option disabled selected>\r\n                        Select Hospital\r\n                      </option>\r\n                      {hospitals.map((hospital) => (\r\n                        <option key={hospital.hId} value={hospital.hId}>\r\n                          {hospital.hName}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    <select\r\n                      className=\"form-select bg-white pla border-1\"\r\n                      style={{ height: 55}}\r\n                      name=\"adId\"\r\n                      required\r\n                      value={formData.adId || \"\"}\r\n                      onChange={handleInputChangeA}\r\n                    >\r\n                      <option disabled selected>\r\n                        Select Doctor\r\n                      </option>\r\n                      {doctorsA.map((doctor) => (\r\n                        <option key={doctor.dId} value={doctor.dId}>\r\n                          {doctor.dName}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    <DatePicker\r\n                      selected={formData.ADate}\r\n                      onChange={handleApptDateChange}\r\n                      className=\"form-control bg-white pla border-1\"\r\n                      placeholderText=\"Select Appointment Date (mm/dd/yyyy)\"\r\n                      dateFormat=\"MM/dd/yyyy\"\r\n                      required\r\n                      peekNextMonth\r\n                      showMonthDropdown\r\n                      style={{border:'1px solid #011430 !important' }}\r\n                      showYearDropdown\r\n                      dropdownMode=\"select\"\r\n                      minDate={new Date()}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    {formData.adId && formData.ADate && (\r\n                      <select\r\n                        className=\"form-select bg-white pla border-1\"\r\n                        style={{ height: 55}}\r\n                        name=\"ATime\"\r\n                        required\r\n                        value={formData.ATime}\r\n                        onChange={handleInputChangeA}\r\n                      >\r\n                        <option disabled value=\"\">\r\n                          Select Time\r\n                        </option>\r\n                        {availableTimes.map((time, index) => (\r\n                          <option key={index} value={time}>\r\n                            {time}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    <select\r\n                      className=\"form-control bg-white pla border-1\"\r\n                      style={{ height: 55}}\r\n                      name=\"AType\"\r\n                      required\r\n                      value={formData.AType}\r\n                      onChange={handleInputChangeA}\r\n                    >\r\n                      <option value=\"\">Select Appointment Type</option>\r\n                      <option value=\"Physical\">Physical</option>\r\n                      <option value=\"Online\">Online</option>\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    <input\r\n                      type=\"tel\"\r\n                      className=\"form-control bg-white pla border-1\"\r\n                      placeholder=\"Contact No.\"\r\n                      style={{ height: 55}}\r\n                      name=\"AMobile\"\r\n                      required\r\n                      pattern=\"^03[0-9]{9}$\"\r\n                      value={formData.AMobile}\r\n                      onChange={handleInputChangeA}\r\n                      maxLength={11}\r\n                      minLength={11}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    <input\r\n                      type=\"email\"\r\n                      className=\"form-control bg-white pla border-1\"\r\n                      placeholder=\"Your Email\"\r\n                      style={{ height: 55}}\r\n                      name=\"AEmail\"\r\n                      required\r\n                      pattern=\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\r\n                      value={formData.AEmail}\r\n                      onChange={handleInputChangeA}\r\n                      // maxLength={30}\r\n                      // minLength={12}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    <textarea\r\n                      className=\"form-control bg-white pla border-1\"\r\n                      placeholder=\"Appointment Reason\"\r\n                      style={{ height: 100}}\r\n                      name=\"AReason\"\r\n                      required\r\n                      value={formData.AReason}\r\n                      onChange={handleInputChangeA}\r\n                      maxLength={50}\r\n                      minLength={5}\r\n                    ></textarea>\r\n                  </div>\r\n                  <div className=\"col-12\">\r\n                    <button\r\n                      className=\"btn btn-primary btn-hov w-100 py-3 text-white\"\r\n                      type=\"submit\"\r\n                    >\r\n                      {loading ? \"Sending...\" : \"Make an Appointment\"}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <SweetAlert\r\n            show={showAlert}\r\n            title=\"Required Fields\"\r\n            onConfirm={() => setShowAlert(false)}\r\n          >\r\n            {alertMessage}\r\n          </SweetAlert>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Appointment;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}